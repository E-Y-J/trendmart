#app/static/swagger.yaml

swagger: '2.0'
info:
  title: "TRENDMART API"
  description: "API documentation for the TRENDMART application."
  version: "1.0.0"
host: "127.0.0.1:5000/api/"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"



# =========================
# Paths
# =========================
paths: 
  
  /auth/register: # Authentication - Register
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email and password. Returns user data and JWT tokens for immediate login.
      parameters:
        - in: body
          name: body
          description: Registration data
          required: true
          schema:
            $ref: '#/definitions/RegisterPayload'
      responses:
        201:
          description: User registered successfully
          schema:
            $ref: '#/definitions/RegisterResponse'
          examples:
            application/json:
              {
                "email": "user@example.com",
              }
        400:
          description: Validation error or email already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              {
                "status": "error",
                "message": "A user with this email already exists!"
              }

  /auth/login: # Authentication - Login
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password. Returns JWT access and refresh tokens.
      parameters:
        - in: body
          name: body
          description: Login credentials
          required: true
          schema:
            $ref: '#/definitions/LoginPayload'
      responses:
        200:
          description: Login successful
          schema:
            $ref: '#/definitions/TokenResponse'
          examples:
            application/json:
              {
                "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                "refresh_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                "token_type": "Bearer",
                "expires_in": 3600
              }
        401:
          description: Invalid credentials
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              {
                "error": "Invalid credentials"
              }

  /auth/protected: # Protected Route - Test
    get:
      tags:
        - Authentication
      summary: Test protected route
      description: Test endpoint to verify JWT authentication is working
      security:
        - BearerAuth: []
      responses:
        200:
          description: Authentication successful
          schema:
            $ref: '#/definitions/ProtectedResponse'
          examples:
            application/json:
              {
                "message": "Hello! You are successfully authenticated!",
                "user_id": 1,
                "email": "user@example.com",
              }
        401:
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              {
                "msg": "Missing Authorization Header"
              }
          
# =========================
# Security Definitions
# =========================
securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: "Enter 'Bearer' followed by your JWT token. Example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."

# =========================
# Definitions (Schemas)
# =========================  
definitions: 
  # Authentication Schemas
  RegisterPayload:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        format: email
        example: "user@example.com"
        description: "Valid email address for the user"
      password:
        type: string
        minLength: 8
        example: "SecurePass123!"
        description: "Password must be at least 8 characters with uppercase, lowercase, number, and special character"

  RegisterResponse:
    type: object
    properties:
      email:
        type: string
        example: "user@example.com"
      
  LoginPayload:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        format: email
        example: "user@example.com"
      password:
        type: string
        example: "SecurePass123!"

  TokenResponse:
    type: object
    properties:
      access_token:
        type: string
        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        description: "JWT access token for API authentication"
      refresh_token:
        type: string
        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        description: "JWT refresh token for getting new access tokens"
      token_type:
        type: string
        example: "Bearer"
        description: "Token type (always 'Bearer')"
      expires_in:
        type: integer
        example: 3600
        description: "Token expiration time in seconds"

  ProtectedResponse:
    type: object
    properties:
      message:
        type: string
        example: "Hello! You are successfully authenticated!"
      user_id:
        type: integer
        example: 1
      email:
        type: string
        example: "user@example.com"

  ErrorResponse:
    type: object
    properties:
      error:
        type: string
        example: "Error message"
      status:
        type: string
        example: "error"
      message:
        type: string
        example: "Detailed error message"
      details:
        type: object
        description: "Validation error details"



