from sqlalchemy import CheckConstraint, UniqueConstraint
from extensions import db


class Recommendation(db.Model):
    """
    Product Recommendation Model with Click Tracking Analytics

    Stores ML-generated product recommendations with comprehensive interaction tracking.
    Links users to recommended products with confidence scores and engagement metrics.

    Attributes:
        id (int): Primary key, unique recommendation identifier
        user_id (int): Foreign key to User receiving the recommendation
        product_id (int): Foreign key to recommended Product, indexed for performance
        score (float): Recommendation confidence score (0.0-1.0 typical range)
        generated_on (datetime): When recommendation was calculated

        # Recommendation Analytics (Nice-to-Have)
        clicked_recommendation (bool): Whether user clicked on this recommendation
        added_to_cart_from_rec (bool): Whether user added product to cart from recommendation
        clicked_at (datetime): Timestamp when recommendation was clicked
        added_to_cart_at (datetime): Timestamp when product was added to cart from recommendation

    Analytics Features:
        - Track recommendation click-through rates
        - Monitor conversion from recommendation to cart
        - Measure recommendation algorithm effectiveness
        - Provide feedback loop for ML model improvement

    Business Rules:
        - One recommendation record per user-product pair (enforced by unique constraint)
        - Scores updated when recommendation algorithm runs
        - Higher scores indicate stronger recommendation confidence
        - Click tracking enables recommendation performance analysis

    Usage Notes:
        - Recommendations can be batch-generated by ML pipeline
        - Scores enable ranking and filtering of recommendations
        - Generated timestamp helps with recommendation freshness
        - Analytics data improves future recommendation quality
    """
    __tablename__ = 'recommendations'

    # Primary key
    id = db.Column(db.Integer, primary_key=True)

    # Foreign keys
    user_id = db.Column(db.Integer, db.ForeignKey(
        'users.id', ondelete='CASCADE'), nullable=False)
    product_id = db.Column(db.Integer, db.ForeignKey(
        'products.id', ondelete='CASCADE'), nullable=False, index=True)

    score = db.Column(db.Float, nullable=False, default=0.0)
    generated_on = db.Column(
        db.DateTime, default=db.func.now(), nullable=False)
    clicked_recommendation = db.Column(
        db.Boolean, default=False, nullable=False)
    added_to_cart_from_rec = db.Column(
        db.Boolean, default=False, nullable=False)
    clicked_at = db.Column(db.DateTime, nullable=True)
    added_to_cart_at = db.Column(db.DateTime, nullable=True)

    __table_args__ = (UniqueConstraint(
        'user_id', 'product_id', name='uq_recommendation_user_product'),)

    # Relationships
    user = db.relationship('User', back_populates='recommendations')
    product = db.relationship('Product', back_populates='recommendations')
