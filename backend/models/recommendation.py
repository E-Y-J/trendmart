from sqlalchemy import CheckConstraint, UniqueConstraint
from extensions import db


class Recommendation(db.Model):
    """
    Product Recommendation Model

    Stores ML-generated product recommendations for personalized shopping experience.
    Links users to recommended products with confidence scores.

    Attributes:
        id (int): Primary key, unique recommendation identifier
        user_id (int): Foreign key to User receiving the recommendation
        product_id (int): Foreign key to recommended Product, indexed for performance
        score (float): Recommendation confidence score (0.0-1.0 typical range)
        generated_on (datetime): When recommendation was calculated

    Business Rules:
        - One recommendation record per user-product pair (enforced by unique constraint)
        - Scores updated when recommendation algorithm runs
        - Higher scores indicate stronger recommendation confidence

    Usage Notes:
        - Recommendations can be batch-generated by ML pipeline
        - Scores enable ranking and filtering of recommendations
        - Generated timestamp helps with recommendation freshness
    """
    __tablename__ = 'recommendations'

    # Primary key
    id = db.Column(db.Integer, primary_key=True)

    # Foreign keys
    user_id = db.Column(db.Integer, db.ForeignKey(
        'users.id'), ondelete='CASCADE', nullable=False)
    product_id = db.Column(db.Integer, db.ForeignKey(
        'products.id'), ondelete='CASCADE', nullable=False, index=True)

    score = db.Column(db.Float, nullable=False, default=0.0)
    generated_on = db.Column(
        db.DateTime, default=db.func.now(), nullable=False)

    __table_args__ = (UniqueConstraint(
        'user_id', 'product_id', name='uq_recommendation_user_product'),)

    # Relationships
    user = db.relationship('User', back_populates='recommendations')
    product = db.relationship('Product', back_populates='recommendations')
